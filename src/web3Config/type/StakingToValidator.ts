/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface StakingToValidatorInterface extends utils.Interface {
  functions: {
    "BlockEpoch()": FunctionFragment;
    "MaxValidatorNum()": FunctionFragment;
    "MinimalOfStaking()": FunctionFragment;
    "MinimalStakingCoin()": FunctionFragment;
    "SlashContractAddr()": FunctionFragment;
    "StakingLockPeriod()": FunctionFragment;
    "ValidatorContractAddr()": FunctionFragment;
    "ValidatorSlashAmount()": FunctionFragment;
    "WithdrawRewardPeriod()": FunctionFragment;
    "create(address,string,string,string,string)": FunctionFragment;
    "distributeBlockReward()": FunctionFragment;
    "edit(address,string,string,string,string)": FunctionFragment;
    "getActivatedValidators()": FunctionFragment;
    "getStakingInfo(address,address)": FunctionFragment;
    "getValidatorCandidate()": FunctionFragment;
    "getValidatorDescription(address)": FunctionFragment;
    "getValidatorInfo(address)": FunctionFragment;
    "initialize(address[])": FunctionFragment;
    "initialized()": FunctionFragment;
    "isJailed(address)": FunctionFragment;
    "isValidatorActivated(address)": FunctionFragment;
    "isValidatorCandidate(address)": FunctionFragment;
    "slashValidator(address)": FunctionFragment;
    "stake(address)": FunctionFragment;
    "totalStaking()": FunctionFragment;
    "unjailed()": FunctionFragment;
    "unstake(address)": FunctionFragment;
    "updateActivatedValidators()": FunctionFragment;
    "validateDescription(string,string,string,string)": FunctionFragment;
    "validatorCandidateSet(uint256)": FunctionFragment;
    "validatorSet(uint256)": FunctionFragment;
    "withdrawRewards(address)": FunctionFragment;
    "withdrawStaking(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BlockEpoch"
      | "MaxValidatorNum"
      | "MinimalOfStaking"
      | "MinimalStakingCoin"
      | "SlashContractAddr"
      | "StakingLockPeriod"
      | "ValidatorContractAddr"
      | "ValidatorSlashAmount"
      | "WithdrawRewardPeriod"
      | "create"
      | "distributeBlockReward"
      | "edit"
      | "getActivatedValidators"
      | "getStakingInfo"
      | "getValidatorCandidate"
      | "getValidatorDescription"
      | "getValidatorInfo"
      | "initialize"
      | "initialized"
      | "isJailed"
      | "isValidatorActivated"
      | "isValidatorCandidate"
      | "slashValidator"
      | "stake"
      | "totalStaking"
      | "unjailed"
      | "unstake"
      | "updateActivatedValidators"
      | "validateDescription"
      | "validatorCandidateSet"
      | "validatorSet"
      | "withdrawRewards"
      | "withdrawStaking"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BlockEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MaxValidatorNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MinimalOfStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MinimalStakingCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SlashContractAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "StakingLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ValidatorContractAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ValidatorSlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WithdrawRewardPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBlockReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "edit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivatedValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorDescription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isJailed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorActivated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidatorCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "slashValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unjailed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateActivatedValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateDescription",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCandidateSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStaking",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "BlockEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MaxValidatorNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MinimalOfStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MinimalStakingCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SlashContractAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "StakingLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ValidatorContractAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ValidatorSlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WithdrawRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "edit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivatedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isJailed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidatorCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unjailed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateActivatedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCandidateSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStaking",
    data: BytesLike
  ): Result;

  events: {
    "AddToValidatorCandidate(address)": EventFragment;
    "RemoveFromValidatorCandidate(address)": EventFragment;
    "RewardDistributed(address[],uint256[],uint256)": EventFragment;
    "Staking(address,address,uint256)": EventFragment;
    "Unstake(address,address,uint256,uint256)": EventFragment;
    "ValidatorCreated(address,address)": EventFragment;
    "ValidatorSetUpdated(address[])": EventFragment;
    "ValidatorSlash(address,uint256)": EventFragment;
    "ValidatorUnjailed(address)": EventFragment;
    "ValidatorUpdated(address,address)": EventFragment;
    "WithdrawRewards(address,address,uint256,uint256)": EventFragment;
    "WithdrawStaking(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddToValidatorCandidate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveFromValidatorCandidate"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSlash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUnjailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStaking"): EventFragment;
}

export interface AddToValidatorCandidateEventObject {
  validator: string;
}
export type AddToValidatorCandidateEvent = TypedEvent<
  [string],
  AddToValidatorCandidateEventObject
>;

export type AddToValidatorCandidateEventFilter =
  TypedEventFilter<AddToValidatorCandidateEvent>;

export interface RemoveFromValidatorCandidateEventObject {
  valdiator: string;
}
export type RemoveFromValidatorCandidateEvent = TypedEvent<
  [string],
  RemoveFromValidatorCandidateEventObject
>;

export type RemoveFromValidatorCandidateEventFilter =
  TypedEventFilter<RemoveFromValidatorCandidateEvent>;

export interface RewardDistributedEventObject {
  validators: string[];
  rewards: BigNumber[];
  rewardCount: BigNumber;
}
export type RewardDistributedEvent = TypedEvent<
  [string[], BigNumber[], BigNumber],
  RewardDistributedEventObject
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export interface StakingEventObject {
  staker: string;
  validator: string;
  amount: BigNumber;
}
export type StakingEvent = TypedEvent<
  [string, string, BigNumber],
  StakingEventObject
>;

export type StakingEventFilter = TypedEventFilter<StakingEvent>;

export interface UnstakeEventObject {
  staker: string;
  validator: string;
  amount: BigNumber;
  unLockHeight: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface ValidatorCreatedEventObject {
  validator: string;
  rewardAddr: string;
}
export type ValidatorCreatedEvent = TypedEvent<
  [string, string],
  ValidatorCreatedEventObject
>;

export type ValidatorCreatedEventFilter =
  TypedEventFilter<ValidatorCreatedEvent>;

export interface ValidatorSetUpdatedEventObject {
  validators: string[];
}
export type ValidatorSetUpdatedEvent = TypedEvent<
  [string[]],
  ValidatorSetUpdatedEventObject
>;

export type ValidatorSetUpdatedEventFilter =
  TypedEventFilter<ValidatorSetUpdatedEvent>;

export interface ValidatorSlashEventObject {
  validator: string;
  amount: BigNumber;
}
export type ValidatorSlashEvent = TypedEvent<
  [string, BigNumber],
  ValidatorSlashEventObject
>;

export type ValidatorSlashEventFilter = TypedEventFilter<ValidatorSlashEvent>;

export interface ValidatorUnjailedEventObject {
  validator: string;
}
export type ValidatorUnjailedEvent = TypedEvent<
  [string],
  ValidatorUnjailedEventObject
>;

export type ValidatorUnjailedEventFilter =
  TypedEventFilter<ValidatorUnjailedEvent>;

export interface ValidatorUpdatedEventObject {
  validator: string;
  rewardAddr: string;
}
export type ValidatorUpdatedEvent = TypedEvent<
  [string, string],
  ValidatorUpdatedEventObject
>;

export type ValidatorUpdatedEventFilter =
  TypedEventFilter<ValidatorUpdatedEvent>;

export interface WithdrawRewardsEventObject {
  validator: string;
  rewardAddress: string;
  amount: BigNumber;
  nextWithdrawBlock: BigNumber;
}
export type WithdrawRewardsEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawRewardsEventObject
>;

export type WithdrawRewardsEventFilter = TypedEventFilter<WithdrawRewardsEvent>;

export interface WithdrawStakingEventObject {
  staker: string;
  validator: string;
  amount: BigNumber;
}
export type WithdrawStakingEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawStakingEventObject
>;

export type WithdrawStakingEventFilter = TypedEventFilter<WithdrawStakingEvent>;

export interface StakingToValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingToValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BlockEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    MaxValidatorNum(overrides?: CallOverrides): Promise<[number]>;

    MinimalOfStaking(overrides?: CallOverrides): Promise<[BigNumber]>;

    MinimalStakingCoin(overrides?: CallOverrides): Promise<[BigNumber]>;

    SlashContractAddr(overrides?: CallOverrides): Promise<[string]>;

    StakingLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    ValidatorContractAddr(overrides?: CallOverrides): Promise<[string]>;

    ValidatorSlashAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    WithdrawRewardPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    create(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    edit(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActivatedValidators(overrides?: CallOverrides): Promise<[string[]]>;

    getStakingInfo(
      staker: PromiseOrValue<string>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getValidatorCandidate(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber]>;

    getValidatorDescription(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getValidatorInfo(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber, string[]]
    >;

    initialize(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isJailed(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidatorActivated(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidatorCandidate(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    slashValidator(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      validator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStaking(overrides?: CallOverrides): Promise<[BigNumber]>;

    unjailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateActivatedValidators(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateDescription(
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validatorCandidateSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdrawRewards(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStaking(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BlockEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  MaxValidatorNum(overrides?: CallOverrides): Promise<number>;

  MinimalOfStaking(overrides?: CallOverrides): Promise<BigNumber>;

  MinimalStakingCoin(overrides?: CallOverrides): Promise<BigNumber>;

  SlashContractAddr(overrides?: CallOverrides): Promise<string>;

  StakingLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  ValidatorContractAddr(overrides?: CallOverrides): Promise<string>;

  ValidatorSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

  WithdrawRewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  create(
    rewardAddr: PromiseOrValue<string>,
    moniker: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    details: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeBlockReward(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  edit(
    rewardAddr: PromiseOrValue<string>,
    moniker: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    details: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActivatedValidators(overrides?: CallOverrides): Promise<string[]>;

  getStakingInfo(
    staker: PromiseOrValue<string>,
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getValidatorCandidate(
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], BigNumber]>;

  getValidatorDescription(
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  getValidatorInfo(
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber, BigNumber, string[]]
  >;

  initialize(
    validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isJailed(
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidatorActivated(
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidatorCandidate(
    who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  slashValidator(
    validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    validator: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStaking(overrides?: CallOverrides): Promise<BigNumber>;

  unjailed(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateActivatedValidators(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateDescription(
    moniker: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    email: PromiseOrValue<string>,
    details: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validatorCandidateSet(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  validatorSet(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdrawRewards(
    validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStaking(
    validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BlockEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    MaxValidatorNum(overrides?: CallOverrides): Promise<number>;

    MinimalOfStaking(overrides?: CallOverrides): Promise<BigNumber>;

    MinimalStakingCoin(overrides?: CallOverrides): Promise<BigNumber>;

    SlashContractAddr(overrides?: CallOverrides): Promise<string>;

    StakingLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ValidatorContractAddr(overrides?: CallOverrides): Promise<string>;

    ValidatorSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    WithdrawRewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributeBlockReward(overrides?: CallOverrides): Promise<void>;

    edit(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActivatedValidators(overrides?: CallOverrides): Promise<string[]>;

    getStakingInfo(
      staker: PromiseOrValue<string>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getValidatorCandidate(
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber]>;

    getValidatorDescription(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getValidatorInfo(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber, string[]]
    >;

    initialize(
      validators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isJailed(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidatorActivated(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidatorCandidate(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    slashValidator(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalStaking(overrides?: CallOverrides): Promise<BigNumber>;

    unjailed(overrides?: CallOverrides): Promise<boolean>;

    unstake(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateActivatedValidators(overrides?: CallOverrides): Promise<string[]>;

    validateDescription(
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validatorCandidateSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdrawRewards(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawStaking(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddToValidatorCandidate(address)"(
      validator?: PromiseOrValue<string> | null
    ): AddToValidatorCandidateEventFilter;
    AddToValidatorCandidate(
      validator?: PromiseOrValue<string> | null
    ): AddToValidatorCandidateEventFilter;

    "RemoveFromValidatorCandidate(address)"(
      valdiator?: PromiseOrValue<string> | null
    ): RemoveFromValidatorCandidateEventFilter;
    RemoveFromValidatorCandidate(
      valdiator?: PromiseOrValue<string> | null
    ): RemoveFromValidatorCandidateEventFilter;

    "RewardDistributed(address[],uint256[],uint256)"(
      validators?: null,
      rewards?: null,
      rewardCount?: null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      validators?: null,
      rewards?: null,
      rewardCount?: null
    ): RewardDistributedEventFilter;

    "Staking(address,address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): StakingEventFilter;
    Staking(
      staker?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): StakingEventFilter;

    "Unstake(address,address,uint256,uint256)"(
      staker?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null,
      unLockHeight?: null
    ): UnstakeEventFilter;
    Unstake(
      staker?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null,
      unLockHeight?: null
    ): UnstakeEventFilter;

    "ValidatorCreated(address,address)"(
      validator?: PromiseOrValue<string> | null,
      rewardAddr?: PromiseOrValue<string> | null
    ): ValidatorCreatedEventFilter;
    ValidatorCreated(
      validator?: PromiseOrValue<string> | null,
      rewardAddr?: PromiseOrValue<string> | null
    ): ValidatorCreatedEventFilter;

    "ValidatorSetUpdated(address[])"(
      validators?: null
    ): ValidatorSetUpdatedEventFilter;
    ValidatorSetUpdated(validators?: null): ValidatorSetUpdatedEventFilter;

    "ValidatorSlash(address,uint256)"(
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ValidatorSlashEventFilter;
    ValidatorSlash(
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ValidatorSlashEventFilter;

    "ValidatorUnjailed(address)"(
      validator?: PromiseOrValue<string> | null
    ): ValidatorUnjailedEventFilter;
    ValidatorUnjailed(
      validator?: PromiseOrValue<string> | null
    ): ValidatorUnjailedEventFilter;

    "ValidatorUpdated(address,address)"(
      validator?: PromiseOrValue<string> | null,
      rewardAddr?: PromiseOrValue<string> | null
    ): ValidatorUpdatedEventFilter;
    ValidatorUpdated(
      validator?: PromiseOrValue<string> | null,
      rewardAddr?: PromiseOrValue<string> | null
    ): ValidatorUpdatedEventFilter;

    "WithdrawRewards(address,address,uint256,uint256)"(
      validator?: PromiseOrValue<string> | null,
      rewardAddress?: PromiseOrValue<string> | null,
      amount?: null,
      nextWithdrawBlock?: null
    ): WithdrawRewardsEventFilter;
    WithdrawRewards(
      validator?: PromiseOrValue<string> | null,
      rewardAddress?: PromiseOrValue<string> | null,
      amount?: null,
      nextWithdrawBlock?: null
    ): WithdrawRewardsEventFilter;

    "WithdrawStaking(address,address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawStakingEventFilter;
    WithdrawStaking(
      staker?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawStakingEventFilter;
  };

  estimateGas: {
    BlockEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    MaxValidatorNum(overrides?: CallOverrides): Promise<BigNumber>;

    MinimalOfStaking(overrides?: CallOverrides): Promise<BigNumber>;

    MinimalStakingCoin(overrides?: CallOverrides): Promise<BigNumber>;

    SlashContractAddr(overrides?: CallOverrides): Promise<BigNumber>;

    StakingLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ValidatorContractAddr(overrides?: CallOverrides): Promise<BigNumber>;

    ValidatorSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    WithdrawRewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    create(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    edit(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActivatedValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingInfo(
      staker: PromiseOrValue<string>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorDescription(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorInfo(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isJailed(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidatorActivated(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidatorCandidate(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slashValidator(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      validator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStaking(overrides?: CallOverrides): Promise<BigNumber>;

    unjailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateActivatedValidators(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateDescription(
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorCandidateSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawRewards(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStaking(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BlockEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MaxValidatorNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MinimalOfStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MinimalStakingCoin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SlashContractAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    StakingLockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ValidatorContractAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ValidatorSlashAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WithdrawRewardPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeBlockReward(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    edit(
      rewardAddr: PromiseOrValue<string>,
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActivatedValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingInfo(
      staker: PromiseOrValue<string>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorCandidate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorDescription(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorInfo(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isJailed(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidatorActivated(
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidatorCandidate(
      who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slashValidator(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      validator: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unjailed(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateActivatedValidators(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateDescription(
      moniker: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      email: PromiseOrValue<string>,
      details: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorCandidateSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorSet(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawRewards(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStaking(
      validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
